#!env python

from pwn import *


def setup(program: str, debug: bool = True, use_libc: bool = True, use_ld: bool = True) -> process:
    from os.path import join, dirname, isfile
    from glob import iglob

    program = join(dirname(__file__), program)
    pdir = dirname(program)
    command = [program]
    env = {}

    if use_ld:
        pattern = join(pdir, '**/ld.so*')
        ld = [i for i in iglob(pattern, recursive=True) if isfile(i)]

        if len(ld) >= 1:
            command = [ld[0], *command]

    if use_libc:
        pattern = join(pdir, '**/libc.so*')
        libc = [i for i in iglob(pattern, recursive=True) if isfile(i)]

        if len(libc) >= 1:
            if use_ld:
                env['LD_LIBRARY_PATH'] = dirname(libc[0])
            else:
                env['LD_PRELOAD'] = libc[0]

    if debug:
        command = ['setarch', '-R', *command]

    return process(command, env=env)


def debug(p: process, script=''):
    sets = ''
    g = globals()
    for k in g:
        if k.startswith('_') or not isinstance(g[k], int):
            continue
        sets += f'set ${k}=(void*){g[k]}\n'
    gdb.attach(p, gdbscript=f"{sets}\n{script}")
    breakpoint()


#######################################################################


def PROTECT_PTR(ptr: int, pos: int) -> int:
    return (pos >> 12) ^ ptr


def REVEAL_PTR(ptr: int, pos: int) -> int:
    return PROTECT_PTR(pos, ptr)


def PTR_MANGLE(ptr: int, guard: int) -> int:
    ptr ^= guard
    temp = f"{ptr:064b}"
    return int(temp[0x11:] + temp[:0x11], 2)


def PTR_DEMANGLE(ptr: int, guard: int) -> int:
    temp = f"{ptr:064b}"
    return int(temp[-0x11:] + temp[:-0x11], 2) ^ guard


#######################################################################


PROGRAM = ''
SERVER = ('', 80)

context.binary = PROGRAM
context.log_level = 'debug'

con = setup(PROGRAM)
# con = gdb.debug(COMMAND, env=ENV, aslr=False, gdbscript=GDBSCRIPT)
# con = remote(*SERVER)

con.interactive()
