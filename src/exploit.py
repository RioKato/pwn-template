#!env python

from pwn import process, gdb, context
from typing import List

gdb_attachable: bool = True
gdbscript: str = ''


def setup(command: List[str], aslr: bool = False, debug: bool = False, **keywords) -> process:
    if debug:
        global gdb_attachable
        gdb_attachable = False

        global gdbscript
        initscript = gdbscript
        if initscript != '':
            initscript = f'''
            tbreak main
            continue
            {initscript}
            '''

        return gdb.debug(command, aslr=aslr, gdbscript=initscript, **keywords)
    else:
        if not aslr:
            command = ['setarch', '-R', *command]
        return process(command, **keywords)


def attach(p: process):
    if gdb_attachable:
        gdb.attach(p, gdbscript=gdbscript)
    breakpoint()


def put(barr: bytearray, idx: int, value: bytes):
    assert (idx >= 0 and idx + len(value) <= len(barr))
    barr[idx:idx+len(value)] = value


def protect(ptr: int, pos: int) -> int:
    return (pos >> 12) ^ ptr


def reveal(ptr: int, pos: int) -> int:
    return protect(ptr, pos)


def mangle(ptr: int, guard: int) -> int:
    ptr ^= guard
    temp = f"{ptr:064b}"
    return int(temp[0x11:] + temp[:0x11], 2)


def demangle(ptr: int, guard: int) -> int:
    temp = f"{ptr:064b}"
    return int(temp[-0x11:] + temp[:-0x11], 2) ^ guard


#######################################################################


COMMAND = ['']
SERVER = ('', 80)

context.binary = COMMAND[0]
context.log_level = 'debug'

gdbscript = ''''''

con = setup(COMMAND)

con.interactive()
