#!/usr/bin/env python3

PROGRAM = ''
ENV = {}
SERVER = ('', 80)

############################################################################
def struct(*layout, fill=b'?', size=None):
    assert(len(fill) == 1 and isinstance(fill, bytes))

    position = []
    offset = 0
    for v in layout:
        assert(isinstance(v, int) or isinstance(v, bytes))

        if isinstance(v, int):
            offset = v
        elif isinstance(v, bytes):
            position.append((offset, v))
            offset += len(v)

    position.sort(key = lambda xs: xs[0])

    result = b''
    for (offset, data) in position:
        assert(offset >= len(result))
        result += fill * (offset - len(result)) + data

    if size:
        assert(size >= len(result))
        result += fill * (size - len(result))

    return result
        

############################################################################
from pwn import *

context.binary    = PROGRAM
# context.arch      = 'amd64'
context.terminal  = ['tmux', 'splitw', '-h']
context.log_level = 'debug'

con = process([PROGRAM], env=ENV)
# con = remote(*SERVER)
# con = gdb.debug([PROGRAM], env=ENV, gdbscript='continue')

elf = ELF(PROGRAM)

# EXAMPLES
# elf.bss(offset)
# elf.plt.fun
# elf.got.fun
# elf.address = 0xdeadbeef
# constants.SYS_execve
# con.sendlineafter('>', '0')
# payload = fmtstr_payload(offset, {0xabc: 0xdef})
# gdb.attach(con)

con.interactive()
