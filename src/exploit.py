#!/usr/bin/env python3

PROGRAM = ''
ENV = {}
SERVER = ('', 80)

EXEC = [f'./{PROGRAM}']
# EXEC = ['./lib/ld.so', '--library-path', './lib', f'./{PROGRAM}']

VARS = {}
GDBSCRIPT = '\n'.join([f"set {i} = {VARS[i]:#x}" for i in VARS] + ['continue'])

############################################################################
PAD8 = b'\xef\xcd\xab\x89\x67\x45\x23\x01'
PAD4 = b'\x67\x45\x23\x01'
PAD2 = b'\x23\x01'
PAD1 = b'\x01'

def layout(*dsl, size=None, pad8=PAD8, pad4=PAD4, pad2=PAD2, pad1=PAD1):
    assert(isinstance(pad8, bytes) and len(pad8) == 8)
    assert(isinstance(pad4, bytes) and len(pad4) == 4)
    assert(isinstance(pad2, bytes) and len(pad2) == 2)
    assert(isinstance(pad1, bytes) and len(pad1) == 1)

    position = []
    offset = 0
    for v in dsl:
        assert(isinstance(v, int) or isinstance(v, bytes))

        if isinstance(v, int):
            offset = v
        elif isinstance(v, bytes):
            position.append((offset, v))
            offset += len(v)

    position.sort(key = lambda xs: xs[0])

    def fill(data, size):
        while size > 0:
            if (len(data) & 7) == 0 and size >= 8:
                data += pad8
                size -= 8
            elif (len(data) & 3) == 0 and size >= 4:
                data += pad4
                size -= 4
            elif (len(data) & 1) == 0 and size >= 2:
                data += pad2
                size -= 2
            else:
                data += pad1
                size -= 1
        return data

    result = b''
    for (offset, data) in position:
        assert(offset >= len(result))
        result = fill(result, offset - len(result))
        result += data

    if size is not None:
        assert(size >= len(result))
        result = fill(result, size - len(result))

    return result

############################################################################
from pwn import *

context.binary    = PROGRAM
# context.arch      = 'amd64'
context.terminal  = ['tmux', 'split-window', '-h']
context.log_level = 'debug'

# con = remote(*SERVER)
con = process(EXEC, env=ENV)
# con = gdb.debug(EXEC, aslr=False, env=ENV, gdbscript=GDBSCRIPT)

elf = ELF(PROGRAM)

# EXAMPLES
# elf.bss(offset)
# elf.plt.fun
# elf.got.fun
# elf.address = 0xdeadbeef
# constants.SYS_execve
# con.sendlineafter('>', '0')
# payload = fmtstr_payload(offset, {0xabc: 0xdef})
# gdb.attach(con)

con.interactive()
