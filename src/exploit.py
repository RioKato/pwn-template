#!env python

from pwn import *


def setup(program: str, debug: bool = True, use_libc: bool = True, use_ld: bool = True) -> process:
    from os.path import join, dirname, isfile
    from glob import iglob

    program = join(dirname(__file__), program)
    pdir = dirname(program)

    ld = None
    if use_ld:
        pattern = join(pdir, '**/ld.so*')
        files = [i for i in iglob(pattern, recursive=True) if isfile(i)]

        if len(files) >= 1:
            ld = files[0]

    libc = None
    if use_libc:
        pattern = join(pdir, '**/libc.so*')
        files = [i for i in iglob(pattern, recursive=True) if isfile(i)]

        if len(files) >= 1:
            libc = files[0]

    command = None
    env = {}

    if ld is None:
        command = [program]
        if libc is not None:
            env = {'LD_PRELOAD': libc}
    else:
        if libc is not None:
            command = [ld, '--library-path', dirname(libc), program]
        else:
            command = [ld, program]

    if debug:
        command = ['setarch', '-R', *command]

    return process(command, env=env)


GDBSCRIPT: str = ''


def compile_types(code: str):
    from tempfile import NamedTemporaryFile
    import subprocess

    with NamedTemporaryFile('w') as fd:
        fd.write(code)
        fd.flush()

        command = ['gcc', '-g', '-fno-eliminate-unused-debug-types',
                   '-x', 'c', '-c', '-o', 'types.o', fd.name]
        result = subprocess.run(command)
        if result.returncode != 0:
            raise RuntimeError('compile failed')
    global GDBSCRIPT
    GDBSCRIPT += 'symbol-file types.o\n'


def debug(p: process, gdbscript=None):
    if gdbscript is None:
        gdbscript = GDBSCRIPT
    gdb.attach(p, gdbscript=gdbscript)
    breakpoint()


#######################################################################


def PROTECT_PTR(ptr: int, pos: int) -> int:
    return (pos >> 12) ^ ptr


def REVEAL_PTR(ptr: int, pos: int) -> int:
    return PROTECT_PTR(ptr, pos)


def PTR_MANGLE(ptr: int, guard: int) -> int:
    ptr ^= guard
    temp = f"{ptr:064b}"
    return int(temp[0x11:] + temp[:0x11], 2)


def PTR_DEMANGLE(ptr: int, guard: int) -> int:
    temp = f"{ptr:064b}"
    return int(temp[-0x11:] + temp[:-0x11], 2) ^ guard


#######################################################################


PROGRAM = ''
SERVER = ('', 80)

context.binary = PROGRAM
context.log_level = 'debug'

con = setup(PROGRAM)
# con = gdb.debug(COMMAND, env=ENV, aslr=False, gdbscript=GDBSCRIPT)
# con = remote(*SERVER)

con.interactive()
