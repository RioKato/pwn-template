#!env python

from pwn import *


def setup(command: list[str], aslr: bool = False, debug: bool = False, **keywords) -> process:
    from types import MethodType

    try:
        with open('init.gdb') as fd:
            gdbscript = fd.read()
    except:
        gdbscript = None

    if debug:
        if gdbscript:
            gdbscript = f'tbreak main\n continue\n {gdbscript}'

        p = gdb.debug(command, aslr=aslr, gdbscript=gdbscript, **keywords)
        p.attachable = False
    else:
        if not aslr:
            command = ['setarch', '-R', *command]

        p = process(command, **keywords)
        p.attachable = True

    def attach(self: process):
        if self.attachable:
            gdb.attach(self, gdbscript=self.gdbscript)
        breakpoint()

    p.attach = MethodType(attach, p)
    p.gdbscript = gdbscript
    return p


def put(barr: bytearray, idx: int, value: bytes):
    assert (idx >= 0 and idx + len(value) <= len(barr))
    barr[idx:idx+len(value)] = value


def protect(ptr: int, pos: int) -> int:
    return (pos >> 12) ^ ptr


def reveal(ptr: int, pos: int) -> int:
    return protect(ptr, pos)


def mangle(ptr: int, guard: int) -> int:
    ptr ^= guard
    temp = f"{ptr:064b}"
    return int(temp[0x11:] + temp[:0x11], 2)


def demangle(ptr: int, guard: int) -> int:
    temp = f"{ptr:064b}"
    return int(temp[-0x11:] + temp[:-0x11], 2) ^ guard


#######################################################################


COMMAND = ['']
SERVER = ('', 80)

context.binary = COMMAND[0]
context.log_level = 'debug'

con = setup(COMMAND)

con.interactive()
